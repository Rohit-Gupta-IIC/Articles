import numpy as np  
import pandas as pd  
import tensorflow as tf  
from functools import reduce  
import matplotlib.pyplot as plt  
%matplotlib inline  
  
np.random.seed(1943)  
tf.set_random_seed(1943)  
  
iris = [((5.1, 3.5, 1.4, 0.2), (1, 0, 0)),  
        ((4.9, 3.0, 1.4, 0.2), (1, 0, 0)),  
        ((4.7, 3.2, 1.3, 0.2), (1, 0, 0)),  
        ((4.6, 3.1, 1.5, 0.2), (1, 0, 0)),  
        ((5.0, 3.6, 1.4, 0.2), (1, 0, 0)),  
        ((5.4, 3.9, 1.7, 0.4), (1, 0, 0)),  
        ((4.6, 3.4, 1.4, 0.3), (1, 0, 0)),  
        ((5.0, 3.4, 1.5, 0.2), (1, 0, 0)),  
        ((4.4, 2.9, 1.4, 0.2), (1, 0, 0)),  
        ((4.9, 3.1, 1.5, 0.1), (1, 0, 0)),  
        ((5.4, 3.7, 1.5, 0.2), (1, 0, 0)),  
        ((4.8, 3.4, 1.6, 0.2), (1, 0, 0)),  
        ((4.8, 3.0, 1.4, 0.1), (1, 0, 0)),  
        ((4.3, 3.0, 1.1, 0.1), (1, 0, 0)),  
        ((5.8, 4.0, 1.2, 0.2), (1, 0, 0)),  
        ((5.7, 4.4, 1.5, 0.4), (1, 0, 0)),  
        ((5.4, 3.9, 1.3, 0.4), (1, 0, 0)),  
        ((5.1, 3.5, 1.4, 0.3), (1, 0, 0)),  
        ((5.7, 3.8, 1.7, 0.3), (1, 0, 0)),  
        ((5.1, 3.8, 1.5, 0.3), (1, 0, 0)),  
        ((5.4, 3.4, 1.7, 0.2), (1, 0, 0)),  
        ((5.1, 3.7, 1.5, 0.4), (1, 0, 0)),  
        ((4.6, 3.6, 1.0, 0.2), (1, 0, 0)),  
        ((5.1, 3.3, 1.7, 0.5), (1, 0, 0)),  
        ((4.8, 3.4, 1.9, 0.2), (1, 0, 0)),  
        ((5.0, 3.0, 1.6, 0.2), (1, 0, 0)),  
        ((5.0, 3.4, 1.6, 0.4), (1, 0, 0)),  
        ((5.2, 3.5, 1.5, 0.2), (1, 0, 0)),  
        ((5.2, 3.4, 1.4, 0.2), (1, 0, 0)),  
        ((4.7, 3.2, 1.6, 0.2), (1, 0, 0)),  
        ((4.8, 3.1, 1.6, 0.2), (1, 0, 0)),  
        ((5.4, 3.4, 1.5, 0.4), (1, 0, 0)),  
        ((5.2, 4.1, 1.5, 0.1), (1, 0, 0)),  
        ((5.5, 4.2, 1.4, 0.2), (1, 0, 0)),  
        ((4.9, 3.1, 1.5, 0.1), (1, 0, 0)),  
        ((5.0, 3.2, 1.2, 0.2), (1, 0, 0)),  
        ((5.5, 3.5, 1.3, 0.2), (1, 0, 0)),  
        ((4.9, 3.1, 1.5, 0.1), (1, 0, 0)),  
        ((4.4, 3.0, 1.3, 0.2), (1, 0, 0)),  
        ((5.1, 3.4, 1.5, 0.2), (1, 0, 0)),  
        ((5.0, 3.5, 1.3, 0.3), (1, 0, 0)),  
        ((4.5, 2.3, 1.3, 0.3), (1, 0, 0)),  
        ((4.4, 3.2, 1.3, 0.2), (1, 0, 0)),  
        ((5.0, 3.5, 1.6, 0.6), (1, 0, 0)),  
        ((5.1, 3.8, 1.9, 0.4), (1, 0, 0)),  
        ((4.8, 3.0, 1.4, 0.3), (1, 0, 0)),  
        ((5.1, 3.8, 1.6, 0.2), (1, 0, 0)),  
        ((4.6, 3.2, 1.4, 0.2), (1, 0, 0)),  
        ((5.3, 3.7, 1.5, 0.2), (1, 0, 0)),  
        ((5.0, 3.3, 1.4, 0.2), (1, 0, 0)),  
        ((7.0, 3.2, 4.7, 1.4), (0, 1, 0)),  
        ((6.4, 3.2, 4.5, 1.5), (0, 1, 0)),  
        ((6.9, 3.1, 4.9, 1.5), (0, 1, 0)),  
        ((5.5, 2.3, 4.0, 1.3), (0, 1, 0)),  
        ((6.5, 2.8, 4.6, 1.5), (0, 1, 0)),  
        ((5.7, 2.8, 4.5, 1.3), (0, 1, 0)),  
        ((6.3, 3.3, 4.7, 1.6), (0, 1, 0)),  
        ((4.9, 2.4, 3.3, 1.0), (0, 1, 0)),  
        ((6.6, 2.9, 4.6, 1.3), (0, 1, 0)),  
        ((5.2, 2.7, 3.9, 1.4), (0, 1, 0)),  
        ((5.0, 2.0, 3.5, 1.0), (0, 1, 0)),  
        ((5.9, 3.0, 4.2, 1.5), (0, 1, 0)),  
        ((6.0, 2.2, 4.0, 1.0), (0, 1, 0)),  
        ((6.1, 2.9, 4.7, 1.4), (0, 1, 0)),  
        ((5.6, 2.9, 3.6, 1.3), (0, 1, 0)),  
        ((6.7, 3.1, 4.4, 1.4), (0, 1, 0)),  
        ((5.6, 3.0, 4.5, 1.5), (0, 1, 0)),  
        ((5.8, 2.7, 4.1, 1.0), (0, 1, 0)),  
        ((6.2, 2.2, 4.5, 1.5), (0, 1, 0)),  
        ((5.6, 2.5, 3.9, 1.1), (0, 1, 0)),  
        ((5.9, 3.2, 4.8, 1.8), (0, 1, 0)),  
        ((6.1, 2.8, 4.0, 1.3), (0, 1, 0)),  
        ((6.3, 2.5, 4.9, 1.5), (0, 1, 0)),  
        ((6.1, 2.8, 4.7, 1.2), (0, 1, 0)),  
        ((6.4, 2.9, 4.3, 1.3), (0, 1, 0)),  
        ((6.6, 3.0, 4.4, 1.4), (0, 1, 0)),  
        ((6.8, 2.8, 4.8, 1.4), (0, 1, 0)),  
        ((6.7, 3.0, 5.0, 1.7), (0, 1, 0)),  
        ((6.0, 2.9, 4.5, 1.5), (0, 1, 0)),  
        ((5.7, 2.6, 3.5, 1.0), (0, 1, 0)),  
        ((5.5, 2.4, 3.8, 1.1), (0, 1, 0)),  
        ((5.5, 2.4, 3.7, 1.0), (0, 1, 0)),  
        ((5.8, 2.7, 3.9, 1.2), (0, 1, 0)),  
        ((6.0, 2.7, 5.1, 1.6), (0, 1, 0)),  
        ((5.4, 3.0, 4.5, 1.5), (0, 1, 0)),  
        ((6.0, 3.4, 4.5, 1.6), (0, 1, 0)),  
        ((6.7, 3.1, 4.7, 1.5), (0, 1, 0)),  
        ((6.3, 2.3, 4.4, 1.3), (0, 1, 0)),  
        ((5.6, 3.0, 4.1, 1.3), (0, 1, 0)),  
        ((5.5, 2.5, 4.0, 1.3), (0, 1, 0)),  
        ((5.5, 2.6, 4.4, 1.2), (0, 1, 0)),  
        ((6.1, 3.0, 4.6, 1.4), (0, 1, 0)),  
        ((5.8, 2.6, 4.0, 1.2), (0, 1, 0)),  
        ((5.0, 2.3, 3.3, 1.0), (0, 1, 0)),  
        ((5.6, 2.7, 4.2, 1.3), (0, 1, 0)),  
        ((5.7, 3.0, 4.2, 1.2), (0, 1, 0)),  
        ((5.7, 2.9, 4.2, 1.3), (0, 1, 0)),  
        ((6.2, 2.9, 4.3, 1.3), (0, 1, 0)),  
        ((5.1, 2.5, 3.0, 1.1), (0, 1, 0)),  
        ((5.7, 2.8, 4.1, 1.3), (0, 1, 0)),  
        ((6.3, 3.3, 6.0, 2.5), (0, 0, 1)),  
        ((5.8, 2.7, 5.1, 1.9), (0, 0, 1)),  
        ((7.1, 3.0, 5.9, 2.1), (0, 0, 1)),  
        ((6.3, 2.9, 5.6, 1.8), (0, 0, 1)),  
        ((6.5, 3.0, 5.8, 2.2), (0, 0, 1)),  
        ((7.6, 3.0, 6.6, 2.1), (0, 0, 1)),  
        ((4.9, 2.5, 4.5, 1.7), (0, 0, 1)),  
        ((7.3, 2.9, 6.3, 1.8), (0, 0, 1)),  
        ((6.7, 2.5, 5.8, 1.8), (0, 0, 1)),  
        ((7.2, 3.6, 6.1, 2.5), (0, 0, 1)),  
        ((6.5, 3.2, 5.1, 2.0), (0, 0, 1)),  
        ((6.4, 2.7, 5.3, 1.9), (0, 0, 1)),  
        ((6.8, 3.0, 5.5, 2.1), (0, 0, 1)),  
        ((5.7, 2.5, 5.0, 2.0), (0, 0, 1)),  
        ((5.8, 2.8, 5.1, 2.4), (0, 0, 1)),  
        ((6.4, 3.2, 5.3, 2.3), (0, 0, 1)),  
        ((6.5, 3.0, 5.5, 1.8), (0, 0, 1)),  
        ((7.7, 3.8, 6.7, 2.2), (0, 0, 1)),  
        ((7.7, 2.6, 6.9, 2.3), (0, 0, 1)),  
        ((6.0, 2.2, 5.0, 1.5), (0, 0, 1)),  
        ((6.9, 3.2, 5.7, 2.3), (0, 0, 1)),  
        ((5.6, 2.8, 4.9, 2.0), (0, 0, 1)),  
        ((7.7, 2.8, 6.7, 2.0), (0, 0, 1)),  
        ((6.3, 2.7, 4.9, 1.8), (0, 0, 1)),  
        ((6.7, 3.3, 5.7, 2.1), (0, 0, 1)),  
        ((7.2, 3.2, 6.0, 1.8), (0, 0, 1)),  
        ((6.2, 2.8, 4.8, 1.8), (0, 0, 1)),  
        ((6.1, 3.0, 4.9, 1.8), (0, 0, 1)),  
        ((6.4, 2.8, 5.6, 2.1), (0, 0, 1)),  
        ((7.2, 3.0, 5.8, 1.6), (0, 0, 1)),  
        ((7.4, 2.8, 6.1, 1.9), (0, 0, 1)),  
        ((7.9, 3.8, 6.4, 2.0), (0, 0, 1)),  
        ((6.4, 2.8, 5.6, 2.2), (0, 0, 1)),  
        ((6.3, 2.8, 5.1, 1.5), (0, 0, 1)),  
        ((6.1, 2.6, 5.6, 1.4), (0, 0, 1)),  
        ((7.7, 3.0, 6.1, 2.3), (0, 0, 1)),  
        ((6.3, 3.4, 5.6, 2.4), (0, 0, 1)),  
        ((6.4, 3.1, 5.5, 1.8), (0, 0, 1)),  
        ((6.0, 3.0, 4.8, 1.8), (0, 0, 1)),  
        ((6.9, 3.1, 5.4, 2.1), (0, 0, 1)),  
        ((6.7, 3.1, 5.6, 2.4), (0, 0, 1)),  
        ((6.9, 3.1, 5.1, 2.3), (0, 0, 1)),  
        ((5.8, 2.7, 5.1, 1.9), (0, 0, 1)),  
        ((6.8, 3.2, 5.9, 2.3), (0, 0, 1)),  
        ((6.7, 3.3, 5.7, 2.5), (0, 0, 1)),  
        ((6.7, 3.0, 5.2, 2.3), (0, 0, 1)),  
        ((6.3, 2.5, 5.0, 1.9), (0, 0, 1)),  
        ((6.5, 3.0, 5.2, 2.0), (0, 0, 1)),  
        ((6.2, 3.4, 5.4, 2.3), (0, 0, 1)),  
        ((5.9, 3.0, 5.1, 1.8), (0, 0, 1))]  
  
feature = np.vstack([np.array(i[0]) for i in iris])  
label = np.vstack([np.array(i[1]) for i in iris])  
  
x = feature[:, 2:4]  # use "Petal length" and "Petal width" only  
y = label  
d = x.shape[1]  
  
def tf_kron_prod(a, b):  
    res = tf.einsum('ij,ik->ijk', a, b)  
    res = tf.reshape(res, [-1, tf.reduce_prod(res.shape[1:])])  
    return res  
  
  
def tf_bin(x, cut_points, temperature=0.1):  
    # x is a N-by-1 matrix (column vector)  
    # cut_points is a D-dim vector (D is the number of cut-points)  
    # this function produces a N-by-(D+1) matrix, each row has only one element being one and the rest are all zeros  
    D = cut_points.get_shape().as_list()[0]  
    W = tf.reshape(tf.linspace(1.0, D + 1.0, D + 1), [1, -1])  
    cut_points = tf.contrib.framework.sort(cut_points)  # make sure cut_points is monotonically increasing  
    b = tf.cumsum(tf.concat([tf.constant(0.0, shape=[1]), -cut_points], 0))  
    h = tf.matmul(x, W) + b  
    res = tf.nn.softmax(h / temperature)  
    return res  
  
  
def nn_decision_tree(x, cut_points_list, leaf_score, temperature=0.1):  
    # cut_points_list contains the cut_points for each dimension of feature  
    leaf = reduce(tf_kron_prod,  
                  map(lambda z: tf_bin(x[:, z[0]:z[0] + 1], z[1], temperature), enumerate(cut_points_list)))  
    return tf.matmul(leaf, leaf_score)  
  
num_cut = [1, 1]  # "Petal length" and "Petal width"  
num_leaf = np.prod(np.array(num_cut) + 1)  
num_class = 3  
  
sess = tf.InteractiveSession()  
x_ph = tf.placeholder(tf.float32, [None, d])  
y_ph = tf.placeholder(tf.float32, [None, num_class])  
cut_points_list = [tf.Variable(tf.random_uniform([i])) for i in num_cut]  
leaf_score = tf.Variable(tf.random_uniform([num_leaf, num_class]))  
y_pred = nn_decision_tree(x_ph, cut_points_list, leaf_score, temperature=0.1)  
loss = tf.reduce_mean(tf.losses.softmax_cross_entropy(logits=y_pred, onehot_labels=y_ph))  
opt = tf.train.AdamOptimizer(0.1)  
train_step = opt.minimize(loss)  
sess.run(tf.global_variables_initializer())  
for i in range(1000):  
    _, loss_e = sess.run([train_step, loss], feed_dict={x_ph: x, y_ph: y})  
    if i % 200 == 0:  
        print(loss_e)  
print('error rate %.2f' % (1 - np.mean(np.argmax(y_pred.eval(feed_dict={x_ph: x}), axis=1) == np.argmax(y, axis=1))))  
sample_x0 = np.repeat(np.linspace(0, np.max(x[:,0]), 100), 100).reshape(-1,1)  
sample_x1 = np.tile(np.linspace(0, np.max(x[:,1]), 100).reshape(-1,1), [100,1])  
sample_x = np.hstack([sample_x0, sample_x1])  
sample_label = np.argmax(y_pred.eval(feed_dict={x_ph: sample_x}), axis=1)  
plt.figure(figsize=(8,8))  
plt.scatter(x[:,0],   
            x[:,1],   
            c=np.argmax(y, axis=1),   
            marker='o',  
            s=50,  
            cmap='summer',   
            edgecolors='black')  
plt.scatter(sample_x0.flatten(),   
            sample_x1.flatten(),   
            c=sample_label.flatten(),   
            marker='D',  
            s=20,  
            cmap='summer',   
            edgecolors='none',  
            alpha=0.33)  
